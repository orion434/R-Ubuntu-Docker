---
version: 2

refernces:
  image_config: &image_config

    #IMAGE_USERNAME: orion42   # Username on docker
    IMAGE_NAME: ubuntu-lts-r    # Name of the project on docker
    #DOCKER_NAME: orion42/ubuntu-lts-r
    IMAGE_TAG: 0.04_devtools     #  Docker version tag
    R_LIBS: ./ci_dependencies

  build_docker: &build_docker
    run:
      name: Build the docker from Dockerfile
      command: |
          docker build ./ --no-cache=true  \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg VCS_REF=$(git rev-parse --short HEAD) \
            -t $DOCKER_USERNAME/$IMAGE_NAME:$IMAGE_TAG \
            -t $DOCKER_USERNAME/$IMAGE_NAME:alpha \
            -t $DOCKER_USERNAME/$IMAGE_NAME:latest 
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
          docker push $DOCKER_USERNAME/$IMAGE_NAME:$IMAGE_TAG 

      #--build-arg BUILD_VERSION=${build_version} \  
      # Preparing the Image for the Registry (docker build)
      # > https://circleci.com/docs/2.0/custom-images/#preparing-the-image-for-the-registry
      #
      # Pushing the image to the registry (docker login && docker push)
      # > https://circleci.com/docs/2.0/custom-images/#pushing-the-image-to-the-registry
      # make sure to set your Docker Hub username & password in CircleCI,
      # either as project-specific environment variables  or as resources in your organization's org-global Context
      
jobs:

  build_deploy_docker:
    machine: 
      image: circleci/classic:latest
    environment:
      <<: *image_config # Import here the configuration parameters
    steps:
      - checkout
      - *build_docker

  test_image:
    docker:
      - image: $DOCKER_USERNAME/$IMAGE_NAME:$IMAGE_TAG
    environment:
      <<: *image_config # Needed for using the variables in the name of image
    steps:
      - checkout
      - run: cat /etc/*-release # Echo Linux version
  
  check_update_docker:  # Check if an update of docker is needed, if so run the build_deploy_docker job
    docker:
      - image: $DOCKER_USERNAME/$IMAGE_NAME:$IMAGE_TAG
    environment:
      <<: *image_config

    steps:
      - checkout
      #- run: cat /etc/*-release # Echo Linux version

      # sudo apt update 2>/dev/null | grep packages | cut -d '.' -f 1

      #https://linoxide.com/linux-how-to/list-number-packages-updates-linux/
      # - run: |
      #     printf "Check how many packages can be upgraded\n"
      #     apt-get -s dist-upgrade | grep "^[[:digit:]]\+ upgraded"
      #     apt-get -s dist-upgrade | grep -Po "^[[:digit:]]+ (?=upgraded)"

      # - run: export pkg_num=$(apt-get -s dist-upgrade | grep -Po "^[[:digit:]]+ (?=upgraded)") && echo $pkg_num 

      #pip3 list --outdated,
              #pip install pip-tools

              # pip freeze | awk '{split($0, a, "=="); print a[1]}' | wc -l
      
      # - run: command -v pip && pip --version
      # - run: command -v pip3 && pip3 --version
      # pip2upg=pip list --outdated --format=freeze | awk '{split($0, a, "=="); print a[1]}' | wc -l
      # printf "Pakages to be upgraded: \n apt: $apt2upg \n pip: not checked \n r  : not checked \n"
      
      # - run:  R --version  # 3.6.1

      # https://www.r-bloggers.com/upgrade-r-without-losing-your-packages/amp/
      # https://stat.ethz.ch/R-manual/R-patched/library/utils/html/update.packages.html

       #run: Rscript -e 'cat( nrow( update.packages(ask = FALSE) ) )

      - run: 
          name: Check if docker need to be updated (based on packages upgrade list)
          command: |

              # Check if there are apt packages to be upgraded
              apt2upg=$( sudo apt-get -s dist-upgrade | grep -Po "^[[:digit:]]+ (?=upgraded)" ) 

              # Check if there are old r packages to be upgraded. If not convert NULL to 0
              r2upg=$( sudo Rscript -e ' r_upg <-nrow( old.packages() ) ; if ( is.null(r_upg) ) { r_upg =0 }  ; cat(r_upg)'  )

              # Print information
              printf "Pakages to be upgraded: \n apt: $apt2upg  \n r  : $r2upg \n"

              # Check if either (apt or r) packages need to be upgraded are >0 then echo info + rebuild the docker
              if [  "$apt2upg" -gt 0 ] || [  "$r2upg" -gt 0 ] ; then
                printf "Some packages require to be updated. Proceed to rebuild the docker. \n"

                 
                # The following if are only for test. They should be run while building the docker. 

                  # Update apt packages if needed
                  if [  "$apt2upg" ]; then     
                    sudo apt-get upgrade
                    apt2upg=$( sudo apt-get -s dist-upgrade | grep -Po "^[[:digit:]]+ (?=upgraded)" ) 
                  fi

                  # Update r packages if needed
                  if [  "$r2upg" ]; then                     
                    sudo Rscript -e 'update.packages(ask = FALSE)'
                    sudo Rscript -e 'cat( nrow( old.packages() ) )'
                  fi

                  apt2upg=$( sudo apt-get -s dist-upgrade | grep -Po "^[[:digit:]]+ (?=upgraded)" ) 
                  r2upg=$( sudo Rscript -e ' r_upg <-nrow( old.packages() ) ; if ( is.null(r_upg) ) { r_upg =0 }  ; cat(r_upg)'  )
                  printf "Pakages to be upgraded: \n apt: $apt2upg  \n r  : $r2upg \n"


                # Write here the instruction to manually trigger the job for building the docker 
                #
                curl --user ${DOCKER_TOKEN}: \
                  --data build_parameters[CIRCLE_JOB]=trigger_deploy_docker \
                  --data revision=$CIRCLE_SHA1 \
                  https://circleci.com/api/v1.1/project/github/orion434/R-Ubuntu-Docker/tree/dev
              # curl --data build=true -X POST https://registry.hub.docker.com/u/svendowideit/testhook/trigger/be579c82-7c0e-11e4-81c4-0242ac110020/

              else
                printf "All packages already up to date. No further action required. \n" 
              fi

  #trigger_test:

  call_trigger_job:
    machine: 
        image: circleci/classic:latest
    environment:
      <<: *image_config # Import here the configuration parameters
    steps:
      - deploy:
          name: conditionally run a deploy job
          command: |
            if [[ true ]] ; then
              curl --user ${DOCKER_TOKEN}: \
                      --data build_parameters[CIRCLE_JOB]=test_image \
                      --data revision=$CIRCLE_SHA1 \
                      https://circleci.com/api/v1.1/project/github/orion434/R-Ubuntu-Docker/tree/dev
                  #  https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH     

                 #  /project/:vcs-type/:username/:project/tree/:branch
            fi

workflows:
  version: 2.1

  # manual_deploy_docker:
  #   jobs:
     
  #     -  wait_manual_approval:
  #         type: approval # requires that an in-app button be clicked by an appropriate member of the pr

  #     - build_deploy_docker: # Wait for the manual approval to build the image
  #         requires:
  #         - wait_manual_approval

  #     - test_image:  # Only run test on sucessfully builds
  #         requires:
  #           - build_deploy_docker

  # trigger_deploy_docker:
  #   jobs:
  #     - test_image

  update_docker:
    jobs:
      - call_trigger_job
    
  # cron_workflow:  
  #   triggers: #use the triggers key to indicate a scheduled build
  #     - schedule:
  #         cron: "32 * * * *" # Cron-job every hour
  #         filters:
  #           branches:
  #             only: dev
  #   jobs:
  #     #- check_update_docker
  #     - call_trigger_job
          
      # https://circleci.com/docs/2.0/triggers/
      # https://circleci.com/docs/2.0/workflows/#scheduling-a-workflow
      #  triggers: #use the triggers key to indicate a scheduled build - filters MUST be defined to make it work
      # - schedule:
      #     cron: "0 0 * * *" # use cron syntax to set the schedule for every day nightly 12am UTC (min hh  dd month day_week)
      #     cron: "0 0 1 * *" # Cron-job every 1-st day of the month at 12am UTC
      #     cron: "0 * * * *" # Cron-job every hour
      #     filters:
      #       branches:
      #         only: dev

 #      context: org-global # - To mantain env variables
