---
version: 2.1

refernces:
  image_config: &image_config

    IMAGE_USERNAME: orion42   # Username on docker
    IMAGE_NAME: ubuntu-lts-r    # Name of the project on docker
    IMAGE_TAG: 0.05_devtools     #  Docker version tag
    R_LIBS: ./ci_dependencies

  build_docker: &build_docker
    run:
      name: Build the docker from Dockerfile
      command: |
            docker build -t $IMAGE_USERNAME/$IMAGE_NAME:$IMAGE_TAG -t $IMAGE_USERNAME/$IMAGE_NAME:latest  ./ --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker push $DOCKER_USERNAME/$IMAGE_NAME:$IMAGE_TAG 

        # Preparing the Image for the Registry (docker build)
        # > https://circleci.com/docs/2.0/custom-images/#preparing-the-image-for-the-registry
        #
        # Pushing the image to the registry (docker login && docker push)
        # > https://circleci.com/docs/2.0/custom-images/#pushing-the-image-to-the-registry
        # make sure to set your Docker Hub username & password in CircleCI,
        # either as project-specific environment variables  or as resources in your organization's org-global Context
        
        # Multiple tags are allowed: docker build -t latest -t tag2...

jobs:

  build-image:
    machine: 
      image: circleci/classic:latest
    environment:
      <<: *image_config # Import here the configuration parameters

    steps:
      - checkout
      - run: pwd
      - run: ls
      
      - *build_docker

  test_image:
    docker:
      - image: $DOCKER_USERNAME/$IMAGE_NAME:$IMAGE_TAG
    environment:
      <<: *image_config

    steps:
      - checkout
      - run: cat /etc/*-release # Echo Linux version
  
  check_image:
    docker:
      - image: $DOCKER_USERNAME/$IMAGE_NAME:$IMAGE_TAG
    environment:
      <<: *image_config

    steps:
      - checkout
      # sudo apt update 2>/dev/null | grep packages | cut -d '.' -f 1

      #https://linoxide.com/linux-how-to/list-number-packages-updates-linux/
      - run: printf "Check how many packages can be upgraded\n"
      - run: apt-get -s dist-upgrade | grep "^[[:digit:]]\+ upgraded"
      - run: apt-get -s dist-upgrade | grep -Po "^[[:digit:]]+ (?=upgraded)"
      - run: export pkg_num=$(apt-get -s dist-upgrade | grep -Po "^[[:digit:]]+ (?=upgraded)") && echo $pkg_num 
      - run: echo $pkg_num 
      - run: echo "$pkg_num" 
      - run: echo "$pkg_num to be upgraded"

      - run: printf "$pkg_num"
      - run: printf "$pkg_num to be upgraded \n"

      - run: |
          export pkg_num=$(apt-get -s dist-upgrade | grep -Po "^[[:digit:]]+ (?=upgraded)") 
          if [  "$pkg_num" ] ; then
            echo "$pkg_num to be upgraded - Proceed to rebuild the docker"
            
            docker build -t $IMAGE_USERNAME/$IMAGE_NAME:$IMAGE_TAG -t $IMAGE_USERNAME/$IMAGE_NAME:latest  ./ --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker push $DOCKER_USERNAME/$IMAGE_NAME:$IMAGE_TAG 

          else
            echo "$pkg_num to be upgraded - No further action" 
          fi

workflows:
  version: 2.1
  deploy_dockerfile:
    jobs:
      - check_image
      #- build-image
      #- test_image:
      #    requires:
      #      - build-image
 #      context: org-global
